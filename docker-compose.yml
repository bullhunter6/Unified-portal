version: '3.8'

services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: portal_v3_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_MULTIPLE_DATABASES: esg_db,credit_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-databases.sh:/docker-entrypoint-initdb.d/create-multiple-databases.sh
    networks:
      - portal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Redis (Optional - for caching)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: portal_v3_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - portal_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Next.js Application
  # ============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: portal_v3_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Database
      DATABASE_URL_ESG: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/esg_db?schema=public
      DATABASE_URL_CREDIT: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/credit_db?schema=public
      
      # NextAuth
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # Email
      MAIL_SERVER: ${MAIL_SERVER}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM: ${MAIL_FROM}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ORG_ID: ${OPENAI_ORG_ID}
      
      # Cron
      CRON_SECRET: ${CRON_SECRET}
      
      # Application
      NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_BASE_URL:-http://localhost:3000}
      NODE_ENV: ${NODE_ENV:-production}
      
      # Redis (optional)
      REDIS_URL: redis://redis:6379
    volumes:
      - uploads_data:/app/uploads
      - pdfx_data:/app/.pdfx_store
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - portal_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Nginx Reverse Proxy (Optional)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: portal_v3_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - portal_network

# ============================================
# Networks
# ============================================
networks:
  portal_network:
    driver: bridge

# ============================================
# Volumes
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  pdfx_data:
    driver: local
