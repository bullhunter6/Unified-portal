generator client {
  provider = "prisma-client-js"
  output   = "../generated/client" // <â€” custom path inside this package
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activity_logs {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  action     String    @db.VarChar(100)
  details    String?
  ip_address String?   @db.VarChar(50)
  timestamp  DateTime? @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model activitylog {
  user_id     Int?
  action      String   @db.VarChar(100)
  resource    String?  @db.VarChar(100)
  resource_id String?  @db.VarChar(255)
  details     String?
  ip_address  String?  @db.VarChar(45)
  user_agent  String?
  status      String   @db.VarChar(50)
  error       String?
  request_id  String?  @db.VarChar(255)
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  user        user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([action], map: "ix_activitylog_action")
  @@index([created_at], map: "ix_activitylog_created_at")
  @@index([id], map: "ix_activitylog_id")
  @@index([request_id], map: "ix_activitylog_request_id")
  @@index([resource], map: "ix_activitylog_resource")
  @@index([updated_at], map: "ix_activitylog_updated_at")
}

model ai_assistant_config {
  id           Int       @id @default(autoincrement())
  user_id      Int?
  config_key   String    @db.VarChar(100)
  config_value String
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  users        users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, config_key])
}

model ai_conversations {
  id             Int       @id @default(autoincrement())
  session_id     String    @db.VarChar(255)
  user_id        Int?
  title          String?   @db.VarChar(255)
  summary        String?
  total_messages Int?      @default(0)
  tokens_used    Int?      @default(0)
  cost_usd       Decimal?  @default(0) @db.Decimal(10, 4)
  status         String?   @default("active") @db.VarChar(20)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  users          users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_id], map: "idx_conversations_session")
  @@index([user_id, created_at(sort: Desc)], map: "idx_conversations_user")
}

model ai_entity_memory {
  id               Int       @id @default(autoincrement())
  user_id          Int?
  entity_type      String    @db.VarChar(50)
  entity_key       String    @db.VarChar(255)
  entity_data      Json
  confidence_score Decimal?  @default(0.5) @db.Decimal(3, 2)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  users            users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, entity_type, entity_key])
  @@index([entity_key], map: "idx_entity_memory_key")
  @@index([user_id, entity_type], map: "idx_entity_memory_user_type")
}

model ai_knowledge_base {
  id               Int       @id @default(autoincrement())
  knowledge_type   String    @db.VarChar(50)
  topic            String    @db.VarChar(100)
  title            String    @db.VarChar(255)
  content          String
  source           String?   @db.VarChar(100)
  confidence_score Decimal?  @default(0.5) @db.Decimal(3, 2)
  usage_count      Int?      @default(0)
  last_used        DateTime? @db.Timestamp(6)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)

  @@index([topic, knowledge_type], map: "idx_knowledge_base_topic")
  @@index([usage_count(sort: Desc), last_used(sort: Desc)], map: "idx_knowledge_base_usage")
}

model ai_session_memory {
  id            Int       @id @default(autoincrement())
  session_id    String    @db.VarChar(255)
  user_id       Int?
  message_index Int
  role          String    @db.VarChar(20)
  content       String
  metadata      Json?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  expires_at    DateTime? @default(dbgenerated("(CURRENT_TIMESTAMP + '24:00:00'::interval)")) @db.Timestamp(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires_at], map: "idx_session_memory_expires")
  @@index([session_id, message_index], map: "idx_session_memory_session")
}

model article {
  title                   String         @db.VarChar(500)
  slug                    String         @unique(map: "ix_article_slug") @db.VarChar(500)
  summary                 String?
  content                 String?
  source                  String?        @db.VarChar(255)
  source_url              String?        @db.VarChar(1000)
  published_at            DateTime?      @db.Timestamptz(6)
  category                String?        @db.VarChar(100)
  region                  String?        @db.VarChar(100)
  sector                  String?        @db.VarChar(100)
  keywords                Json?          @db.Json
  sentiment_score         Float?
  relevance_score         Float?
  author_id               Int?
  author_name             String?        @db.VarChar(255)
  is_published            Boolean
  is_featured             Boolean
  view_count              Int
  unique_viewers          Int
  ai_summary              String?
  ai_summary_provider     String?        @db.VarChar(50)
  ai_summary_generated_at DateTime?      @db.Timestamptz(6)
  id                      Int            @id @default(autoincrement())
  created_at              DateTime       @default(now()) @db.Timestamptz(6)
  updated_at              DateTime       @default(now()) @db.Timestamptz(6)
  is_deleted              Boolean
  deleted_at              DateTime?      @db.Timestamptz(6)
  user                    user?          @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  article_tags            article_tags[]
  articlestar             articlestar[]
  articleview             articleview[]

  @@index([category], map: "ix_article_category")
  @@index([created_at], map: "ix_article_created_at")
  @@index([id], map: "ix_article_id")
  @@index([is_deleted], map: "ix_article_is_deleted")
  @@index([is_published], map: "ix_article_is_published")
  @@index([published_at], map: "ix_article_published_at")
  @@index([region], map: "ix_article_region")
  @@index([sector], map: "ix_article_sector")
  @@index([source], map: "ix_article_source")
  @@index([title], map: "ix_article_title")
  @@index([updated_at], map: "ix_article_updated_at")
}

model article_tags {
  article_id Int
  tag_id     Int
  article    article @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag        tag     @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([article_id, tag_id])
}

model articlestar {
  user_id    Int
  article_id Int
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  article    article  @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "ix_articlestar_created_at")
  @@index([id], map: "ix_articlestar_id")
  @@index([updated_at], map: "ix_articlestar_updated_at")
}

model articleview {
  article_id    Int
  user_id       Int?
  ip_address    String?  @db.VarChar(45)
  user_agent    String?
  referrer      String?  @db.VarChar(1000)
  view_duration Int?
  id            Int      @id @default(autoincrement())
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
  article       article  @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "ix_articleview_created_at")
  @@index([id], map: "ix_articleview_id")
  @@index([updated_at], map: "ix_articleview_updated_at")
}

model credit_articles {
  id                 Int                  @id @default(autoincrement())
  title              String?
  date               DateTime?            @db.Date
  content            String?
  link               String?
  source             String?
  matched_keywords   String?
  region             String?
  sector             String?
  starred            Boolean?             @default(false)
  starred_at         DateTime?            @db.Timestamp(6)
  summary            String?
  url                String?              @db.VarChar
  created_at         DateTime?            @db.Timestamp(6)
  updated_at         DateTime?            @db.Timestamp(6)
  user_article_stars user_article_stars[]

  @@unique([link, region, sector, source], map: "unique_article_combination")
  @@index([date(sort: Desc)], map: "idx_articles_date_desc")
  @@index([region], map: "idx_articles_region")
  @@index([region, sector], map: "idx_articles_region_sector")
  @@index([sector], map: "idx_articles_sector")
  @@index([source], map: "idx_articles_source")
  @@index([date], map: "idx_credit_articles_date")
  @@index([region], map: "idx_credit_articles_region")
  @@index([sector], map: "idx_credit_articles_sector")
  @@index([source], map: "idx_credit_articles_source")
}

model email_alerts {
  id                Int      @id @default(autoincrement())
  email             String   @db.VarChar(255)
  alert_type        String   @db.VarChar(50)
  subscription_date DateTime @default(now()) @db.Timestamp(6)
  active            Boolean  @default(true)
}

model event {
  title                 String              @db.VarChar(500)
  slug                  String              @unique(map: "ix_event_slug") @db.VarChar(500)
  description           String?
  event_type            String?             @db.VarChar(50)
  location              String?             @db.VarChar(500)
  venue                 String?             @db.VarChar(500)
  is_virtual            Boolean
  virtual_link          String?             @db.VarChar(1000)
  start_date            DateTime            @db.Timestamptz(6)
  end_date              DateTime?           @db.Timestamptz(6)
  timezone              String?             @db.VarChar(50)
  registration_link     String?             @db.VarChar(1000)
  registration_deadline DateTime?           @db.Timestamptz(6)
  max_attendees         Int?
  price                 Float?
  currency              String?             @db.VarChar(3)
  organizer             String?             @db.VarChar(255)
  organizer_email       String?             @db.VarChar(255)
  organizer_phone       String?             @db.VarChar(50)
  sponsors              Json?               @db.Json
  agenda                String?
  speakers              Json?               @db.Json
  tags                  Json?               @db.Json
  source                String?             @db.VarChar(255)
  source_url            String?             @db.VarChar(1000)
  is_published          Boolean
  is_featured           Boolean
  is_cancelled          Boolean
  cancellation_reason   String?
  created_by_id         Int?
  view_count            Int
  id                    Int                 @id @default(autoincrement())
  created_at            DateTime            @default(now()) @db.Timestamptz(6)
  updated_at            DateTime            @default(now()) @db.Timestamptz(6)
  is_deleted            Boolean
  deleted_at            DateTime?           @db.Timestamptz(6)
  user                  user?               @relation(fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  eventregistration     eventregistration[]

  @@index([created_at], map: "ix_event_created_at")
  @@index([event_type], map: "ix_event_event_type")
  @@index([id], map: "ix_event_id")
  @@index([is_deleted], map: "ix_event_is_deleted")
  @@index([is_published], map: "ix_event_is_published")
  @@index([start_date], map: "ix_event_start_date")
  @@index([title], map: "ix_event_title")
  @@index([updated_at], map: "ix_event_updated_at")
}

model eventregistration {
  event_id             Int
  user_id              Int
  registered_at        DateTime  @db.Timestamptz(6)
  is_confirmed         Boolean
  is_cancelled         Boolean
  cancelled_at         DateTime? @db.Timestamptz(6)
  cancellation_reason  String?
  attended             Boolean
  check_in_time        DateTime? @db.Timestamptz(6)
  dietary_requirements String?
  special_requirements String?
  id                   Int       @id @default(autoincrement())
  created_at           DateTime  @default(now()) @db.Timestamptz(6)
  updated_at           DateTime  @default(now()) @db.Timestamptz(6)
  event                event     @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                 user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "ix_eventregistration_created_at")
  @@index([id], map: "ix_eventregistration_id")
  @@index([updated_at], map: "ix_eventregistration_updated_at")
}

model events {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  date       DateTime? @db.Timestamp(6)
  location   String?   @db.VarChar(255)
  details    String?
  link       String?   @db.VarChar(500)
  source     String?   @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model methodologies {
  id             Int       @id @default(autoincrement())
  title          String?
  published_date DateTime? @db.Date
  abstract       String?
  description    String?
  link           String?   @unique
  source         String?
  permalink      String?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  report_url     String?   @unique @db.VarChar(255)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model newsletter_logs {
  id                       Int                      @id @default(autoincrement())
  subscription_id          Int
  sent_at                  DateTime?                @default(now()) @db.Timestamp(6)
  email_to                 String                   @db.VarChar(255)
  email_subject            String?                  @db.VarChar(500)
  articles_count           Int?                     @default(0)
  success                  Boolean?                 @default(true)
  error_message            String?
  articles_included        Json?
  email_content_preview    String?
  newsletter_subscriptions newsletter_subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sent_at], map: "idx_newsletter_logs_sent_at")
  @@index([subscription_id, sent_at], map: "idx_newsletter_logs_subscription")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model newsletter_preferences {
  id                       Int                      @id @default(autoincrement())
  subscription_id          Int
  sources                  String[]
  regions                  String[]
  sectors                  String[]
  include_starred_only     Boolean?                 @default(false)
  frequency                String                   @default("weekly") @db.VarChar(20)
  day_of_week              Int?
  time_of_day              DateTime?                @default(dbgenerated("'09:00:00'::time without time zone")) @db.Time(6)
  timezone                 String?                  @default("UTC") @db.VarChar(50)
  max_articles_per_email   Int?                     @default(10)
  include_summary          Boolean?                 @default(true)
  created_at               DateTime?                @default(now()) @db.Timestamp(6)
  updated_at               DateTime?                @default(now()) @db.Timestamp(6)
  newsletter_subscriptions newsletter_subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([frequency, day_of_week], map: "idx_newsletter_preferences_frequency")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model newsletter_subscriptions {
  id                     Int                      @id @default(autoincrement())
  user_id                Int
  subscription_type      String                   @db.VarChar(50)
  is_active              Boolean?                 @default(true)
  email                  String?                  @db.VarChar(255)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @db.Timestamp(6)
  newsletter_logs        newsletter_logs[]
  newsletter_preferences newsletter_preferences[]
  users                  users                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, subscription_type])
  @@index([subscription_type, is_active], map: "idx_newsletter_subscriptions_type")
  @@index([user_id, is_active], map: "idx_newsletter_subscriptions_user_active")
}

model permission {
  name             permissiontype     @unique
  description      String?            @db.VarChar(255)
  id               Int                @id @default(autoincrement())
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)
  user_permissions user_permissions[]

  @@index([created_at], map: "ix_permission_created_at")
  @@index([id], map: "ix_permission_id")
  @@index([updated_at], map: "ix_permission_updated_at")
}

model publications {
  id          Int       @id @default(autoincrement())
  title       String?
  date        DateTime? @db.Date
  description String?
  link        String?   @unique
  image_url   String?
  source      String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
}

model refreshtoken {
  token      String    @unique(map: "ix_refreshtoken_token") @db.VarChar(255)
  user_id    Int
  expires_at DateTime  @db.Timestamptz(6)
  revoked    Boolean
  revoked_at DateTime? @db.Timestamptz(6)
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "ix_refreshtoken_created_at")
  @@index([id], map: "ix_refreshtoken_id")
  @@index([updated_at], map: "ix_refreshtoken_updated_at")
}

model roles {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model tag {
  name         String         @unique(map: "ix_tag_name") @db.VarChar(100)
  slug         String         @unique(map: "ix_tag_slug") @db.VarChar(100)
  description  String?
  id           Int            @id @default(autoincrement())
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @db.Timestamptz(6)
  article_tags article_tags[]

  @@index([created_at], map: "ix_tag_created_at")
  @@index([id], map: "ix_tag_id")
  @@index([updated_at], map: "ix_tag_updated_at")
}

model user {
  email                    String              @unique(map: "ix_user_email") @db.VarChar(255)
  username                 String?             @unique(map: "ix_user_username") @db.VarChar(100)
  full_name                String?             @db.VarChar(255)
  hashed_password          String              @db.VarChar(255)
  is_active                Boolean
  is_verified              Boolean
  role                     userrole
  bio                      String?
  avatar_url               String?             @db.VarChar(500)
  phone_number             String?             @db.VarChar(20)
  last_login_at            DateTime?           @db.Timestamptz(6)
  last_login_ip            String?             @db.VarChar(45)
  failed_login_attempts    Int
  locked_until             DateTime?           @db.Timestamptz(6)
  two_factor_enabled       Boolean
  two_factor_secret        String?             @db.VarChar(32)
  email_verified_at        DateTime?           @db.Timestamptz(6)
  email_verification_token String?             @db.VarChar(255)
  password_reset_token     String?             @db.VarChar(255)
  password_reset_expires   DateTime?           @db.Timestamptz(6)
  id                       Int                 @id @default(autoincrement())
  created_at               DateTime            @default(now()) @db.Timestamptz(6)
  updated_at               DateTime            @default(now()) @db.Timestamptz(6)
  is_deleted               Boolean
  deleted_at               DateTime?           @db.Timestamptz(6)
  activitylog              activitylog[]
  article                  article[]
  articlestar              articlestar[]
  articleview              articleview[]
  event                    event[]
  eventregistration        eventregistration[]
  refreshtoken             refreshtoken[]
  user_permissions         user_permissions[]
  usersession              usersession[]

  @@index([created_at], map: "ix_user_created_at")
  @@index([id], map: "ix_user_id")
  @@index([is_deleted], map: "ix_user_is_deleted")
  @@index([updated_at], map: "ix_user_updated_at")
}

model user_activity {
  id            Int       @id @default(autoincrement())
  user_id       Int
  action        String    @db.VarChar(100)
  resource_type String?   @db.VarChar(50)
  resource_id   Int?
  details       String?
  ip_address    String?   @db.Inet
  user_agent    String?
  timestamp     DateTime? @default(now()) @db.Timestamp(6)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([action], map: "idx_user_activity_action")
  @@index([resource_type, resource_id], map: "idx_user_activity_resource")
  @@index([timestamp], map: "idx_user_activity_timestamp")
  @@index([user_id], map: "idx_user_activity_user_id")
}

model user_alerts {
  id         Int       @id @default(autoincrement())
  email      String    @db.VarChar(255)
  sources    String?
  sectors    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model user_article_stars {
  id              Int             @id @default(autoincrement())
  user_id         Int
  article_id      Int
  starred_at      DateTime        @default(now()) @db.Timestamp(6)
  credit_articles credit_articles @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_article")
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([article_id], map: "idx_user_article_stars_article_id")
  @@index([starred_at(sort: Desc)], map: "idx_user_article_stars_starred_at")
  @@index([user_id], map: "idx_user_article_stars_user_id")
  @@index([article_id], map: "idx_user_stars_article_id")
  @@index([starred_at(sort: Desc)], map: "idx_user_stars_starred_at")
  @@index([user_id], map: "idx_user_stars_user_id")
}

model user_events {
  id          Int       @id @default(autoincrement())
  user_email  String    @db.VarChar(100)
  event_id    Int
  event_title String    @db.VarChar(255)
  event_date  DateTime  @db.Timestamp(6)
  event_link  String?   @db.VarChar(500)
  created_at  DateTime? @db.Timestamp(6)
}

model user_permissions {
  user_id       Int
  permission_id Int
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, permission_id])
}

model users {
  id                       Int                        @id @default(autoincrement())
  first_name               String                     @db.VarChar(50)
  last_name                String                     @db.VarChar(50)
  email                    String                     @unique @db.VarChar(100)
  password_hash            String                     @db.VarChar(256)
  role                     String                     @db.VarChar(20)
  is_active                Boolean
  created_at               DateTime?                  @db.Timestamp(6)
  updated_at               DateTime?                  @db.Timestamp(6)
  activity_logs            activity_logs[]
  ai_assistant_config      ai_assistant_config[]
  ai_conversations         ai_conversations[]
  ai_entity_memory         ai_entity_memory[]
  ai_session_memory        ai_session_memory[]
  newsletter_subscriptions newsletter_subscriptions[]
  user_activity            user_activity[]
  user_article_stars       user_article_stars[]

  @@index([email], map: "idx_users_email")
  @@index([is_active], map: "idx_users_is_active")
}

model usersession {
  user_id       Int
  session_id    String   @unique(map: "ix_usersession_session_id") @db.VarChar(255)
  ip_address    String?  @db.VarChar(45)
  user_agent    String?
  last_activity DateTime @db.Timestamptz(6)
  expires_at    DateTime @db.Timestamptz(6)
  id            Int      @id @default(autoincrement())
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
  user          user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "ix_usersession_created_at")
  @@index([id], map: "ix_usersession_id")
  @@index([updated_at], map: "ix_usersession_updated_at")
}

enum permissiontype {
  USER_CREATE
  USER_READ
  USER_UPDATE
  USER_DELETE
  ARTICLE_CREATE
  ARTICLE_READ
  ARTICLE_UPDATE
  ARTICLE_DELETE
  ARTICLE_PUBLISH
  EVENT_CREATE
  EVENT_READ
  EVENT_UPDATE
  EVENT_DELETE
  ADMIN_ACCESS
  ADMIN_USERS
  ADMIN_CONTENT
  ADMIN_SETTINGS
  ADMIN_LOGS
  SYSTEM_CONFIG
  SYSTEM_BACKUP
  SYSTEM_MAINTENANCE
}

enum userrole {
  ADMIN
  MODERATOR
  USER
  GUEST
}
